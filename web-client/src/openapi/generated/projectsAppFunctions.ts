/**
 * Generated by @openapi-codegen
 *
 * @version 0
 */
import * as reactQuery from "@tanstack/react-query";
import { ProjectsAppContext, queryKeyFn } from "./projectsAppContext";
import type * as Fetcher from "./projectsAppFetcher";
import { projectsAppFetch } from "./projectsAppFetcher";
import type * as Schemas from "./projectsAppSchemas";

export type GetProjectsListingError = Fetcher.ErrorWrapper<undefined>;

export type GetProjectsListingVariables = ProjectsAppContext["fetcherOptions"];

export const fetchGetProjectsListing = (
  variables: GetProjectsListingVariables,
  signal?: AbortSignal,
) =>
  projectsAppFetch<
    Schemas.ListProjectsResponse,
    GetProjectsListingError,
    undefined,
    {},
    {},
    {}
  >({ url: "/v1/projects", method: "get", ...variables, signal });

export const getProjectsListingQuery = (
  variables: GetProjectsListingVariables,
): [
  reactQuery.QueryKey,
  ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.ListProjectsResponse>,
] => [
  queryKeyFn({
    path: "/v1/projects",
    operationId: "getProjectsListing",
    variables,
  }),
  async ({ signal }: { signal?: AbortSignal }) =>
    fetchGetProjectsListing({ ...variables }, signal),
];

export type QueryOperation = {
  path: "/v1/projects";
  operationId: "getProjectsListing";
  variables: GetProjectsListingVariables;
};
