/**
 * Generated by @openapi-codegen
 *
 * @version 0
 */
import * as reactQuery from "@tanstack/react-query";
import {
  useProjectsAppContext,
  ProjectsAppContext,
} from "./projectsAppContext";
import type * as Fetcher from "./projectsAppFetcher";
import { projectsAppFetch } from "./projectsAppFetcher";
import type * as Schemas from "./projectsAppSchemas";

export type GetProjectsListingError = Fetcher.ErrorWrapper<undefined>;

export type GetProjectsListingVariables = ProjectsAppContext["fetcherOptions"];

export const fetchGetProjectsListing = (
  variables: GetProjectsListingVariables,
  signal?: AbortSignal,
) =>
  projectsAppFetch<
    Schemas.ListProjectsResponse,
    GetProjectsListingError,
    undefined,
    {},
    {},
    {}
  >({ url: "/v1/projects", method: "get", ...variables, signal });

export const useGetProjectsListing = <TData = Schemas.ListProjectsResponse,>(
  variables: GetProjectsListingVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ListProjectsResponse,
      GetProjectsListingError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProjectsAppContext(options);
  return reactQuery.useQuery<
    Schemas.ListProjectsResponse,
    GetProjectsListingError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/v1/projects",
      operationId: "getProjectsListing",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchGetProjectsListing({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type QueryOperation = {
  path: "/v1/projects";
  operationId: "getProjectsListing";
  variables: GetProjectsListingVariables;
};
